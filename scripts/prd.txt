# NDAExpress Product Requirements Document (PRD)

**Date**: May 20, 2025  
**Time**: 05:33 PM CDT

## 1. Introduction

NDAExpress is a web-based platform originally designed to streamline the creation, management, and signing of Non-Disclosure Agreements (NDAs) with event-driven workflows. The project has since expanded its scope to become a versatile tool capable of handling various document types—such as liability waivers, real estate documents, and other contracts—while preserving its core event-based functionality. This PRD outlines the current state of the project, detailing implemented features, technical architecture, ongoing work, and future plans as outlined in "agreement.mdc", updated with the latest development insights.

## 2. Project Scope and Objectives

As per "agreement.mdc", the expansion project aims to:

1. **Broaden Document Support**: Shift from an NDA-specific system to a platform supporting multiple document types.
2. **Enhance Event-Based Workflows**: Enable events to facilitate document signing across different document types.
3. **Defer Payment Features**: Postpone payment processing to a later phase (Phase 3), prioritizing document management.
4. **Plan for AI Integration**: Reserve AI enhancements (Phase 4) for future optional development.

The project is divided into four phases with fixed pricing and estimated timelines:

- **Phase 1**: Document-Agnostic Back End & Folders ($3,000, ~3–4 weeks)
- **Phase 2**: New Document Creation & Signature Flow ($2,500, ~2–3 weeks after Phase 1)
- **Phase 3**: Payment / Subscription Adjustments (Optional, $2,500, ~2 weeks)
- **Phase 4**: AI Enhancements (Optional, $3,000, ~3–4 weeks or more)

## 3. Current Status

Based on the latest updates and repository analysis ("repomix-output.xml"), **Phase 1** is complete, and **Phase 2** has started but is not yet finished. Below is the current status of each phase.

### 3.1 Phase 1: Document-Agnostic Back End & Folders (Completed)

**Objective**: Transition from NDA-specific code to a universal `Document` model and implement a folder system.

**Implemented Features**:

- **Document Model**: Replaced NDA-specific models with a generic `Document` model (`app/Models/Document.php`), supported by migrations (e.g., `2025_03_27_000002_create_documents_table.php`).
- **Folder System**: Added a `Folder` model (`app/Models/Folder.php`) and table (`2025_03_27_000001_create_folders_table.php`), with UI components (`BreadcrumbNavigation.vue`, `FolderNavigation.vue`) for organization.
- **Event Integration**: Maintained event functionality with a pivot table (`2025_04_15_100000_create_event_documents_table.php`) linking events to documents.

**Status**: Fully implemented.

### 3.2 Phase 2: New Document Creation & Signature Flow (In Progress)

**Objective**: Develop a streamlined document creation and signature process for all document types.

**Current Progress**:

- **Implemented**:
  - **Unified Creation Wizard**: Partially built (`resources/js/Pages/Documents/Create.vue`, `SelectType.vue`) for initiating document creation.
  - **Document Upload**: Functional for PDF/Docx files (`DocumentUploadModal.vue`, `DocumentController.php`).
  - **Signature Components**: Electronic signature tools (`SignaturePad.vue`) are available but need refinement.

- **Pending**:
  - Complete the unified creation flow to fully support all document types.
  - Remove NDA-specific assumptions from the UI and workflows.
  - Finalize integration with the Events system for all document types.

**Key Updates**:

- **Document Types and Metadata**:
  - **Previous Approach**: Added static document types and metadata fields via migrations to the `documents` table, which proved inflexible.
  - **Revised Approach**: Treat all documents as typeless unless specified otherwise. Introduce a new `document_metadata` table with columns `document_id`, `key`, and `value` to store arbitrary metadata per document instance (1:1 with documents, not document types, for maximum flexibility).
- **UI Changes**: Removed "Quick Actions" for document types from the documents dashboard to align with the typeless approach.
- **Legacy Routes**: Decided to deprioritize maintaining legacy route functionality, removing custom components like `LegacyRouteMiddleware` and `legacyServiceHandler` to simplify the codebase, though this may temporarily disrupt some unchanged features.

**Status**: Started but not finished, with ongoing adjustments to document handling and codebase simplification.

### 3.3 Phase 3: Payment / Subscription Adjustments (Not Started)

**Objective**: Add payment processing and subscription tiers.

**Current State**: Preliminary code exists (`Charge.php`, `StripeController.php`), but implementation is deferred.

**Status**: Not started.

### 3.4 Phase 4: AI Enhancements (Partially Started)

**Objective**: Integrate AI for clause detection and suggestions.

**Current State**:
- Preliminary work has been initiated towards integrating the Python AI API for document parsing. This includes early efforts to connect the API with the existing document system.
- This integration will require significant overhaul to align with the new document handling methodology, particularly in how document types are processed and managed. Adjustments to the API’s handling of document types will be necessary to reflect the updated typeless approach with flexible metadata.
- Further development and testing will be required to ensure seamless integration and compatibility with the new web application.

**Status**: Partially started but requires substantial refinement.

## 4. Current Features

### 4.1 Document Management
- **Creation**: Partially implemented unified wizard for various document types.
- **Upload**: Supports PDF/Docx file uploads.
- **Organization**: Fully functional folder system.

### 4.2 Signature Workflows
- Electronic signature components are in place, awaiting full integration with the revised document system.

### 4.3 Event-Based Workflows
- Events can link to multiple documents via the `event_documents` table (many-to-many relationship).
- Users can associate a document or template with an event, enabling automated signing via QR codes or links. This workflow is being finalized to support all document types, ensuring that participants can sign any linked document.

### 4.4 User Interface
- **Dashboard**: Simplified by removing "Quick Actions" for document types.
- **Folder Management**: Fully operational with navigation components.
- **Creation and Signing**: Partially implemented wizard and signature tools.

## 5. Technical Architecture

### 5.1 Backend
- **Framework**: Laravel, with models like `Document`, `Folder`, and `Event`.
- **Updates**:
  - Planned `document_metadata` table for flexible metadata storage.
  - Removal of legacy route handling (`LegacyRouteMiddleware`, `legacyServiceHandler`) to streamline the codebase, with fixes planned for any resulting issues.

### 5.2 Frontend
- **Framework**: Vue.js, with components for document and folder management.
- **Changes**: UI adjusted to remove type-specific "Quick Actions", with further refinements pending.

### 5.3 Database
- **Current**: MariaDB with tables for documents, folders, and events.
- **Planned**: Addition of `document_metadata` table.

### 5.4 AI Integration
- **Current**: Preliminary integration of the Python AI API for document parsing has begun but requires overhaul to fit the new document type methodology.

## 6. Testing

A suite of end-to-end (e2e) tests has been developed and is located in the `nda-express-tests/` directory. These tests are written in TypeScript and utilize Jest and Selenium, with Selenium Grid for distributed testing. They are crucial for validating the application's functionality across different scenarios. A detailed testing strategy, including the scope, execution, and maintenance of these tests, will be outlined in a separate Product Requirements Document (PRD) dedicated to testing.

## 7. Ongoing Work

To complete Phase 2, the following tasks are underway:

- **Document Creation**: Finalize the unified wizard for all document types.
- **Metadata Handling**: Implement the `document_metadata` table for per-document key-value pairs.
- **Events System**: Fully enable linking any document or template to an event, allowing participants to sign via QR codes or links regardless of document type.
- **Codebase Simplification**: Remove legacy route handling, addressing any resulting disruptions.
- **UI Refinement**: Complete the shift to a typeless document interface.

Additionally, the partial integration of the Python AI API will be revisited and adjusted to align with the new document handling approach, with testing planned to validate its performance within the updated web application.

## 8. Future Enhancements

### 8.1 Phase 3: Payment Processing (Optional)
- **Plan**: Integrate Stripe for payments and subscriptions.
- **Status**: Awaiting approval to proceed.

### 8.2 Phase 4: AI Enhancements (Optional)
- **Plan**: Complete the integration of the Python AI API for advanced features like clause detection and suggestions.
- **Status**: Preliminary work started, but significant development remains.

## 9. Conclusion

As of May 20, 2025, NDAExpress has completed **Phase 1**, establishing a document-agnostic backend and folder system. **Phase 2** is in progress, with partial implementation of document creation, upload, and signature features, alongside updates to document handling (typeless approach with metadata table), UI simplification (removal of "Quick Actions"), and codebase refactoring (legacy route removal). Preliminary work on **Phase 4** (AI Enhancements) has begun with the Python AI API integration, but this requires further refinement to match the new document methodology. The Events system is being enhanced to support flexible document signing. Phases 3 and 4 remain optional, with further development pending. A comprehensive testing strategy will be detailed in a future PRD.

