# Texas Gun Trader Scraper & Market Analysis – Lean MVP PRD

## Document Info

| Field       | Value                     |
| ----------- | ------------------------- |
| **Version** | 1.1 (Lean MVP)            |
| **Date**    | 13 Jun 2025               |
| **Author**  | @zudsniper                |
| **Status**  | Draft – awaiting sign‑off |

---

## 1 • Purpose

Build a **minimal‑but‑useful** system that continuously scrapes listings from *TexasGunTrader.com*, stores them in Cloudflare‑native services, surfaces them in **Google Sheets** for rapid analysis, provides a lightweight **React‑Admin** console for power‑use actions, and fires **Discord webhook embeds** for deals that meet user‑defined criteria.
The goal is to ship an MVP fast, then iterate.

## 2 • Scope

### In‑scope (Phase 1 MVP)

* Cloudflare Worker scraper with rotating proxy support.
* Storage:

  * **D1** – structured listing data & metadata.
  * **R2** – original listing images.
* **Google Sheets exporter** – single spreadsheet per environment:

  * `Listings` sheet – one row per listing (latest state wins).
  * `ScrapeRuns` sheet – log of every run.
  * `PriceChecks` sheet – results of "Actual Estimate" calls.
* **React‑Admin** web console (served from Cloudflare Pages/Worker):

  * Auth via **Cloudflare Zero Trust**.
  * CRUD on listings (view, tag, mark reviewed).
  * Schedule settings (cron expression, proxy config).
  * Manual **Actual Estimate** trigger with editable prompt template & model selector.
* **Discord webhook embeds** for flagged/under‑priced listings (no full bot).

### Out‑of‑scope (post‑MVP backlog)

* Full Discord bot with slash commands.
* ML deal‑scoring model.
* Automated purchasing flows.
* Multi‑site scraping.

## 3 • Success Criteria (MVP)

| Metric                                  | Target                        |
| --------------------------------------- | ----------------------------- |
| Listing appears in Google Sheets within | **< 5 minutes** of detection  |
| React‑Admin console initial load        | **< 3 s**                     |
| Manual price estimate latency           | **≤ 30 s**                    |
| Discord embed delivery                  | **< 60 s** after deal flagged |

## 4 • High‑Level Architecture

```
┌───────────────┐    CF Cron
│ React‑Admin   │<─────────────┐
│ (CF Pages)    │              │
└──────▲────────┘              │
       │REST/GraphQL           │
┌──────┴────────┐        ┌─────▼─────┐    Google Sheets API
│  API Router   │◀──────▶│  D1 DB    │◀───────────────────────┐
│  (CF Worker)  │        └───────────┘                        │
└──────▲────────┘              ▲                             │
       │                       │                             │
       │                       │                             │
┌──────┴────────┐    Images    │        Deal Embeds          │
│ Scraper       │────────────▶│  R2 Bucket  │──────────────▶ Discord
│ (CF Worker)   │             └────────────┘                Webhook
└───────────────┘
```

## 5 • User Stories

1. **Schedule Scrapes** – As the Project Lead I set a cron (e.g., every 15 min) in the console so scraping runs automatically.
2. **Monitor & Tag Listings** – As an Analyst I view new listings in Google Sheets or the console, add tags (e.g., *possible‑deal*, *out‑of‑state*).
3. **Trigger Price Check** – I click *Estimate* on a listing; the system calls OpenRouter with my chosen model & prompt template, then saves the result.
4. **Receive Alerts** – When a listing is ≥ 20 % under median price, I get a rich embed in Discord with title, image, and delta.

## 6 • Functional Requirements

### 6.1 Scraper (Worker)

* **FR‑S1** Browser‑simulated fetch with rotating proxies (env var list).
* **FR‑S2** Parse each listing: `id`, `title`, `price`, `city`, `description`, `status`, specs, image URLs.
* **FR‑S3** Detect status changes to `SOLD`; upsert into D1 & Sheets.
* **FR‑S4** Resume on failure using `lastPage` checkpoint in D1.
* **FR‑S5** Emit event (`POST /internal/new‑listing`) to API Router when under‑priced rule matches.

### 6.2 Data Layer

* **FR‑D1** Normalized schema (`listings`, `runs`, `estimates`, `tags`).
* **FR‑D2** Images stored in R2 under `/<listingId>/<filename>`.
* **FR‑D3** Sheets sync:

  * New row on first see; update row on changes.
  * Upsert via listing `id` as key.

### 6.3 React‑Admin Console

* **FR‑A1** Login enforced by CF Zero Trust.
* **FR‑A2** `Listings` resource grid with filters (status, tag, price band).
* **FR‑A3** Detail page → *Estimate* button (+ prompt editor modal).
* **FR‑A4** `Settings` page: cron, proxy list, Discord webhook URL, OpenRouter key, default model, under‑price threshold.

### 6.4 Discord Notifications

* **FR‑N1** Send `embed` JSON (title, price, delta%, link, first image).
* **FR‑N2** Rate‑limit 5 messages/min.
* **FR‑N3** Toggle on/off in Settings.

### 6.5 Actual Estimate Service

* **FR‑E1** Build prompt from template + listing JSON.
* **FR‑E2** Call OpenRouter; save response in `estimates` table & Sheets.
* **FR‑E3** Display result in console and optionally push to Discord.

## 7 • Non‑Functional Requirements

| Category        | Requirement                                                               |
| --------------- | ------------------------------------------------------------------------- |
| **Performance** | Full site crawl ≤ 24 h; incremental crawl 1 page/sec.                     |
| **Scalability** | CF Workers durable objects partitioned by listing ID.                     |
| **Reliability** | Retry w/ exponential backoff; alert to Discord on 5 consecutive failures. |
| **Security**    | Secrets in CF KV; Sheets OAuth via Service Account; Zero Trust MFA.       |

## 8 • Phased Roadmap (target)

| Phase              | Duration | Deliverables                                      |
| ------------------ | -------- | ------------------------------------------------- |
| 0 – Setup          | 2 days   | Repo skeleton, CF env, Sheets credentials, CI/CD. |
| 1 – Scraper MVP    | 5 days   | Worker scraper → D1/R2 & Sheets; manual trigger.  |
| 2 – Console MVP    | 4 days   | React‑Admin grid, cron config, manual estimate.   |
| 3 – Discord Alerts | 3 days   | Webhook embeds & under‑price rule.                |
| 4 – Polish & Docs  | 2 days   | README, deploy guide, observability hooks.        |

## 9 • Definition of Done (MVP)

* All FRs in Phases 1‑3 pass e2e tests.
* Production domain behind Zero Trust.
* Spreadsheet & Discord channel receiving real data.
* Team walkthrough recorded.

## 10 • Open Questions / Risks

1. How aggressive can scrape interval be before TGT blocks us?
2. Proxy costs vs. CF bandwidth limits.
3. Google Sheets API write quotas under heavy update load.
4. Image hotlinking vs. storing copies in R2 (copyright).

---

**End of Document**
